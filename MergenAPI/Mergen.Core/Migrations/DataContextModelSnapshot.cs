// <auto-generated />
using System;
using Mergen.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mergen.Core.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mergen.Core.Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarImageId");

                    b.Property<string>("AvatarItemIds");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CoverImageId");

                    b.Property<string>("Email");

                    b.Property<string>("EmailVerificationToken");

                    b.Property<DateTime?>("EmailVerificationTokenGenerationTime");

                    b.Property<string>("FirstName");

                    b.Property<bool>("FriendsOnlyBattleInvitations");

                    b.Property<int>("GenderId");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsBot");

                    b.Property<bool>("IsEmailVerified");

                    b.Property<bool>("IsPhoneNumberVerified");

                    b.Property<string>("LastName");

                    b.Property<string>("Nickname");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PhoneNumberVerificationToken");

                    b.Property<DateTime?>("PhoneNumberVerificationTokenGenerationTime");

                    b.Property<bool>("ReceiveNotifications");

                    b.Property<DateTime>("RegisterDateTime");

                    b.Property<string>("ResetPasswordToken");

                    b.Property<DateTime?>("ResetPasswordTokenGenerationTime");

                    b.Property<string>("RoleIds");

                    b.Property<bool>("SearchableByEmailAddressOrUsername");

                    b.Property<int>("StatusId");

                    b.Property<string>("StatusNote");

                    b.Property<string>("Timezone");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Mergen.Core.Entities.AccountCategoryStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<long>("CategoryId");

                    b.Property<long>("CorrectAnswersCount");

                    b.Property<bool>("IsArchived");

                    b.Property<long>("TotalQuestionsCount");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("AccountCategoryStats");
                });

            modelBuilder.Entity("Mergen.Core.Entities.AccountFriend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<long>("FriendAccountId");

                    b.Property<bool>("IsArchived");

                    b.HasKey("Id");

                    b.ToTable("AccountFriends");
                });

            modelBuilder.Entity("Mergen.Core.Entities.AccountInvitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<string>("Email");

                    b.Property<DateTime>("InvitationDateTime");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("PhoneNumber");

                    b.Property<long?>("RegisteredAccountId");

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.ToTable("AccountInvitations");
                });

            modelBuilder.Entity("Mergen.Core.Entities.AccountItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("ItemTypeId");

                    b.Property<int>("Quantity");

                    b.Property<long>("ShopItemId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ShopItemId");

                    b.ToTable("AccountItems");
                });

            modelBuilder.Entity("Mergen.Core.Entities.AccountRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<bool>("IsArchived");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("Mergen.Core.Entities.AccountStatsSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<int>("AceWinCount");

                    b.Property<int>("AnswerHistoryHelperUsageCount");

                    b.Property<int>("AskMergenHelperUsageCount");

                    b.Property<decimal>("Coins");

                    b.Property<long>("CoinsSpentOnAvatarItems");

                    b.Property<long>("CoinsSpentOnBoosterItems");

                    b.Property<int>("ContinuousActiveDaysCount");

                    b.Property<int>("ContinuousActiveDaysRecord");

                    b.Property<int>("DoubleChanceHelperUsageCount");

                    b.Property<decimal>("GiftedCoins");

                    b.Property<int>("InvitedPlayersCount");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("LastPlayDateTime");

                    b.Property<int>("Level");

                    b.Property<int>("LoseCount");

                    b.Property<double>("LoseRatio");

                    b.Property<int>("PurchasedItemsCount");

                    b.Property<int>("Rank");

                    b.Property<int>("RemoveTwoAnswersHelperUsageCount");

                    b.Property<decimal>("Score");

                    b.Property<int>("Sky");

                    b.Property<int>("SuccessfulBattleInvitationsCount");

                    b.Property<int>("TimeExtenderHelperUsageCount");

                    b.Property<string>("Top3Skills");

                    b.Property<int>("TotalBattlesPlayed");

                    b.Property<int>("UnlockedAchievements");

                    b.Property<int>("WinCount");

                    b.Property<double>("WinRatio");

                    b.HasKey("Id");

                    b.ToTable("AccountStatsSummaries");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<DateTime>("AchieveDateTime");

                    b.Property<long>("AchievementTypeId");

                    b.Property<bool>("IsArchived");

                    b.HasKey("Id");

                    b.HasIndex("AchievementTypeId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Mergen.Core.Entities.AchievementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AceWinCount");

                    b.Property<long?>("AnswerHistoryHelperUsageCount");

                    b.Property<long?>("AskMergenHelperUsageCount");

                    b.Property<long?>("CategoryId");

                    b.Property<long?>("CoinsSpentOnAvatarItems");

                    b.Property<long?>("CoinsSpentOnBooster");

                    b.Property<long?>("CorrectAnswersCountInCategory");

                    b.Property<string>("Description");

                    b.Property<long?>("DoubleChanceHelperUsageCount");

                    b.Property<long?>("GiftedCoinsAmount");

                    b.Property<string>("ImageFileId");

                    b.Property<bool>("IsArchived");

                    b.Property<long?>("NumberOfContinuousDaysPlaying");

                    b.Property<long?>("NumberOfRegisteredFriendsViaInviteLink");

                    b.Property<long?>("NumberOfSuccessfulBattleInvitations");

                    b.Property<long?>("NumberOfTotalBattlesPlayed");

                    b.Property<long?>("RemoveTwoAnswersHelperUsageCount");

                    b.Property<string>("Title");

                    b.Property<long?>("WinnedBattlesCount");

                    b.HasKey("Id");

                    b.ToTable("AchievementTypes");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Battle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BattleType");

                    b.Property<DateTime>("CreationDateTime");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("StartDateTime");

                    b.HasKey("Id");

                    b.ToTable("Battles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Battle");
                });

            modelBuilder.Entity("Mergen.Core.Entities.BattleInvitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<DateTime>("DateTime");

                    b.Property<long>("InviterAccountId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("InviterAccountId");

                    b.ToTable("BattleInvitations");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverImageFileId");

                    b.Property<string>("Description");

                    b.Property<string>("IconFileId");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("StatusId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("MessageText");

                    b.Property<long>("ReceiverAccountId");

                    b.Property<long>("SenderAccountId");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Mergen.Core.Entities.FriendRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FromAccountId");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime>("RequestDateTime");

                    b.Property<int>("StatusId");

                    b.Property<long>("ToAccountId");

                    b.HasKey("Id");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BattleId");

                    b.Property<long?>("CurrentTurnPlayerId");

                    b.Property<int>("GameState");

                    b.Property<bool>("IsArchived");

                    b.Property<long?>("OneToOneBattleId");

                    b.Property<long?>("SelectedCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.HasIndex("CurrentTurnPlayerId");

                    b.HasIndex("OneToOneBattleId");

                    b.HasIndex("SelectedCategoryId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Mergen.Core.Entities.GameCategory", b =>
                {
                    b.Property<long>("GameId");

                    b.Property<long>("CategoryId");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("GameCategories");
                });

            modelBuilder.Entity("Mergen.Core.Entities.GameQuestion", b =>
                {
                    b.Property<long>("GameId");

                    b.Property<long>("QuestionId");

                    b.Property<int?>("Player1SelectedAnswer");

                    b.Property<int?>("Player2SelectedAnswer");

                    b.HasKey("GameId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("GameQuestions");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<string>("Body");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("NotificationTypeId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("CreationDateTime");

                    b.Property<bool>("IsArchived");

                    b.Property<DateTime?>("PaymentDateTime");

                    b.Property<string>("RedirectUrl");

                    b.Property<long>("ShopItemId");

                    b.Property<int>("State");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ShopItemId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Mergen.Core.Entities.PurchaseLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("IsArchived");

                    b.Property<long>("PurchasedByAccountId");

                    b.Property<long>("Quantity");

                    b.Property<long>("ShopItemId");

                    b.HasKey("Id");

                    b.ToTable("PurchaseLogs");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer1");

                    b.Property<long>("Answer1ChooseHistory");

                    b.Property<string>("Answer2");

                    b.Property<long>("Answer2ChooseHistory");

                    b.Property<string>("Answer3");

                    b.Property<long>("Answer3ChooseHistory");

                    b.Property<string>("Answer4");

                    b.Property<long>("Answer4ChooseHistory");

                    b.Property<string>("Body");

                    b.Property<string>("CategoryIdsCache");

                    b.Property<int>("CorrectAnswerNumber");

                    b.Property<int>("Difficulty");

                    b.Property<bool>("IsArchived");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Mergen.Core.Entities.QuestionCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CategoryId");

                    b.Property<bool>("IsArchived");

                    b.Property<long>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionCategories");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsArchived");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken");

                    b.Property<long>("AccountId");

                    b.Property<DateTime>("CreationDateTime");

                    b.Property<bool>("IsArchived");

                    b.Property<int>("SourceAppId");

                    b.Property<int>("StateId");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Mergen.Core.Entities.Setting", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Key");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Mergen.Core.Entities.ShopItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AvatarCategoryId");

                    b.Property<int?>("AvatarTypeId");

                    b.Property<bool?>("DefaultAvatar");

                    b.Property<string>("Description");

                    b.Property<string>("ImageFileId");

                    b.Property<bool>("IsArchived");

                    b.Property<decimal>("Price");

                    b.Property<int>("PriceTypeId");

                    b.Property<int?>("Quantity");

                    b.Property<int>("StatusId");

                    b.Property<string>("Title");

                    b.Property<int>("TypeId");

                    b.Property<int?>("UnlockLevel");

                    b.Property<int?>("UnlockSky");

                    b.HasKey("Id");

                    b.ToTable("ShopItems");
                });

            modelBuilder.Entity("Mergen.Core.Entities.UploadedFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CreatorAccountId");

                    b.Property<string>("Extension");

                    b.Property<string>("FileId");

                    b.Property<bool>("IsArchived");

                    b.Property<string>("MimeType");

                    b.Property<int?>("MimeTypeCategoryId");

                    b.Property<string>("Name");

                    b.Property<long?>("Size");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.ToTable("UploadedFiles");
                });

            modelBuilder.Entity("Mergen.Core.Entities.OneToOneBattle", b =>
                {
                    b.HasBaseType("Mergen.Core.Entities.Battle");

                    b.Property<int>("BattleStateId");

                    b.Property<long?>("LastGameId");

                    b.Property<int>("Player1CorrectAnswersCount");

                    b.Property<long>("Player1Id");

                    b.Property<int>("Player2CorrectAnswersCount");

                    b.Property<long?>("Player2Id");

                    b.Property<int>("Round");

                    b.Property<long?>("WinnerPlayerId");

                    b.HasIndex("LastGameId");

                    b.HasIndex("Player1Id");

                    b.HasIndex("Player2Id");

                    b.HasDiscriminator().HasValue("OneToOneBattle");
                });

            modelBuilder.Entity("Mergen.Core.Entities.AccountCategoryStat", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mergen.Core.Entities.AccountItem", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mergen.Core.Entities.ShopItem", "ShopItem")
                        .WithMany()
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mergen.Core.Entities.Achievement", b =>
                {
                    b.HasOne("Mergen.Core.Entities.AchievementType", "AchievementType")
                        .WithMany()
                        .HasForeignKey("AchievementTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mergen.Core.Entities.BattleInvitation", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Account", "InviterAccount")
                        .WithMany()
                        .HasForeignKey("InviterAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mergen.Core.Entities.Game", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Battle", "Battle")
                        .WithMany()
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mergen.Core.Entities.Account", "CurrentTurnPlayer")
                        .WithMany()
                        .HasForeignKey("CurrentTurnPlayerId");

                    b.HasOne("Mergen.Core.Entities.OneToOneBattle")
                        .WithMany("Games")
                        .HasForeignKey("OneToOneBattleId");

                    b.HasOne("Mergen.Core.Entities.Category", "SelectedCategory")
                        .WithMany()
                        .HasForeignKey("SelectedCategoryId");
                });

            modelBuilder.Entity("Mergen.Core.Entities.GameCategory", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mergen.Core.Entities.Game", "Game")
                        .WithMany("GameCategories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mergen.Core.Entities.GameQuestion", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Game", "Game")
                        .WithMany("GameQuestions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mergen.Core.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mergen.Core.Entities.Payment", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mergen.Core.Entities.ShopItem", "ShopItem")
                        .WithMany()
                        .HasForeignKey("ShopItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mergen.Core.Entities.QuestionCategory", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mergen.Core.Entities.Question", "Question")
                        .WithMany("QuestionCategories")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Mergen.Core.Entities.OneToOneBattle", b =>
                {
                    b.HasOne("Mergen.Core.Entities.Game", "LastGame")
                        .WithMany()
                        .HasForeignKey("LastGameId");

                    b.HasOne("Mergen.Core.Entities.Account", "Player1")
                        .WithMany()
                        .HasForeignKey("Player1Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Mergen.Core.Entities.Account", "Player2")
                        .WithMany()
                        .HasForeignKey("Player2Id");
                });
#pragma warning restore 612, 618
        }
    }
}
